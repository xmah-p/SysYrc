grammar;

use crate::ast::{CompUnit, FuncDef, FuncType, Block, Stmt};

// lexer rules
match {
  r"\s*" => {},                // Ignore whitespace
  r"//[^\n\r]*[\n\r]*" => {},  // Ignore single-line comments
  _                            // Default case: convert to token and pass to parser
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
    // This is a macro provided by LALRPOP that automatically expands the names 
    // of the captures in the rule into fields of the struct.
    // Equivalent to:
    // FuncDef {
    //   func_type,
    //   ident,
    //   block,
    // }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <num: Number> ";" => Stmt { <> };

Number: i32 = <num: IntConst> => <>;

// <> stands for the matched text slice &str
// to_string() converts this &str to an owned String
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),                // decimal
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),                     // octal
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),    // hexadecimal
}
